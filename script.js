// Import Firebase SDK
import { initializeApp } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-app.js";
import { getDatabase, ref, onValue } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-database.js";

// üî• C·∫•u h√¨nh Firebase
const firebaseConfig = {
  apiKey: "AIzaSyAJGktb1tH1uCvfHNMP1XDRAuKjb7qr0mY",
  authDomain: "long4-96478.firebaseapp.com",
  databaseURL: "https://long4-96478-default-rtdb.firebaseio.com",
  projectId: "long4-96478",
  storageBucket: "long4-96478.firebasestorage.app",
  messagingSenderId: "329904377529",
  appId: "1:329904377529:web:98a114073f5fef27795568"
};

// ‚ö° Kh·ªüi t·∫°o Firebase
const app = initializeApp(firebaseConfig);
const database = getDatabase(app);
const dataRef = ref(database, 'temp');

// L∆∞u d·ªØ li·ªáu ƒë·ªÉ x·ª≠ l√Ω
let allTimestamps = [];
let allValues = [];
const maxPoints = 50; // Gi·ªõi h·∫°n s·ªë ƒëi·ªÉm hi·ªÉn th·ªã

// üñå Kh·ªüi t·∫°o bi·ªÉu ƒë·ªì Chart.js
const ctx = document.getElementById('realtimeChart').getContext('2d');
const chart = new Chart(ctx, {
    type: 'line',
    data: {
        labels: [],
        datasets: [{
            label: 'D·ªØ li·ªáu c·∫£m bi·∫øn',
            data: [],
            borderColor: 'blue',
            borderWidth: 2,
            pointRadius: 3,
            fill: false
        }]
    },
    options: {
        responsive: true,
        scales: {
            x: {
                title: { display: true, text: 'Th·ªùi gian' }
            },
            y: {
                min: 0, // Gi√° tr·ªã nh·ªè nh·∫•t
                max: 100, // ƒêi·ªÅu ch·ªânh theo c·∫£m bi·∫øn th·ª±c t·∫ø
                title: { display: true, text: 'Gi√° tr·ªã' }
            }
        }
    }
});

// ‚è≥ L·∫Øng nghe d·ªØ li·ªáu theo th·ªùi gian th·ª±c
onValue(dataRef, (snapshot) => {
    const data = snapshot.val();
    if (data) {
        allTimestamps = Object.keys(data);
        allValues = Object.values(data).filter(v => !isNaN(v)).map(Number);
        updateChart();
    }
});

// üìå C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì d·ª±a tr√™n kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn
function updateChart() {
    const startTime = document.getElementById("startTime").value;
    const endTime = document.getElementById("endTime").value;

    let filteredTimestamps = [];
    let filteredValues = [];

    for (let i = 0; i < allTimestamps.length; i++) {
        if ((!startTime || allTimestamps[i] >= startTime) && (!endTime || allTimestamps[i] <= endTime)) {
            filteredTimestamps.push(allTimestamps[i]);
            filteredValues.push(allValues[i]);
        }
    }

    // Gi·ªõi h·∫°n s·ªë ƒëi·ªÉm hi·ªÉn th·ªã ƒë·ªÉ tr√°nh lag
    if (filteredTimestamps.length > maxPoints) {
        const step = Math.ceil(filteredTimestamps.length / maxPoints);
        filteredTimestamps = filteredTimestamps.filter((_, i) => i % step === 0);
        filteredValues = filteredValues.filter((_, i) => i % step === 0);
    }

    chart.data.labels = filteredTimestamps;
    chart.data.datasets[0].data = filteredValues;
    chart.update();
}

// üéõ X·ª≠ l√Ω s·ª± ki·ªán khi ch·ªçn th·ªùi gian
document.getElementById("startTime").addEventListener("change", updateChart);
document.getElementById("endTime").addEventListener("change", updateChart);
document.getElementById("scrollRange").addEventListener("input", (e) => {
    const scrollValue = parseInt(e.target.value);
    const totalPoints = allTimestamps.length;
    const startIdx = Math.max(0, totalPoints - scrollValue - maxPoints);
    const endIdx = Math.min(totalPoints, startIdx + maxPoints);

    chart.data.labels = allTimestamps.slice(startIdx, endIdx);
    chart.data.datasets[0].data = allValues.slice(startIdx, endIdx);
    chart.update();
});
